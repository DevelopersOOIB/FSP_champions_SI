from flask import Flask, render_template, request, redirect, url_for, session, jsonify, send_file
import sqlite3
import random
import os

app = Flask(__name__)
app.secret_key = 'manchester'

def init_db():
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT UNIQUE NOT NULL,
            password TEXT NOT NULL,
            is_vip_user BOOLEAN NOT NULL DEFAULT FALSE
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS tasks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            description TEXT NOT NULL,
            user_id INTEGER NOT NULL,
            FOREIGN KEY (user_id) REFERENCES users(id)
        )
    ''')

    cursor.execute('SELECT COUNT(*) FROM users')
    if cursor.fetchone()[0] == 0:
        cursor.execute('INSERT INTO users (username, password, is_vip_user) VALUES (?, ?, ?)',
                       ('andrey', 'solence_brothers_heaven', True))

    conn.commit()
    conn.close()

# Routes
@app.route('/')
def home():
    return render_template('home.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']

        conn = sqlite3.connect('database.db')
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM users WHERE username=?', (username,))
        user = cursor.fetchone()
        conn.close()

        if user and user[2] == password:
            session['username'] = username
            session['is_vip_user'] = user[3]
            session['user_id'] = user[0]
            return redirect(url_for('dashboard'))

        return "Invalid credentials", 401

    return render_template('login.html')

@app.route('/api/v2/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        is_vip_user = request.form.get('is_vip_user', False)

        conn = sqlite3.connect('database.db')
        cursor = conn.cursor()
        try:
            cursor.execute('INSERT INTO users (username, password, is_vip_user) VALUES (?, ?, ?)',
                           (username, password, bool(is_vip_user)))
            conn.commit()
        except sqlite3.IntegrityError:
            return "User with such username already exists", 400
        finally:
            conn.close()

        return redirect(url_for('login'))

    return render_template('register.html')

@app.route('/dashboard')
def dashboard():
    if 'username' not in session:
        return redirect(url_for('login'))

    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM tasks WHERE user_id=?', (session['user_id'],))
    tasks = cursor.fetchall()
    conn.close()

    return render_template('dashboard.html', is_vip_user=session.get('is_vip_user'), tasks=tasks)

@app.route('/password')
def password():
    if 'username' not in session:
        return redirect(url_for('login'))
    return render_template('password.html')

@app.route('/random_number')
def random_number():
    if 'username' not in session:
        return redirect(url_for('login'))

    from_param = request.args.get('from', default=1, type=int)
    to_param = request.args.get('to', default=1000000, type=int)
    random_num = random.randint(from_param, to_param)

    return render_template('number.html', random_num=random_num, from_param=from_param, to_param=to_param)

@app.route('/todo', methods=['GET', 'POST'])
def todo():
    if 'username' not in session:
        return redirect(url_for('login'))
    return render_template('todo.html')

kitty_images = ['kitty1.jpg', 'kirtty2.jpeg', 'kitty3.jpeg']

@app.route('/gallery', methods=['GET'])
def gallery():
    return render_template('gallery.html', images=kitty_images)

@app.route('/api/v2/gallery', methods=['GET'])
def get_full_image():
    image_urls = [url_for('static', filename=f'images/{img}') for img in kitty_images]
    return jsonify(image_urls)

@app.route('/api/v1/gallery', methods=['GET'])
def vulnerable_gallery():
    filename = request.args.get('file')
    if filename:
        filepath = os.path.join('static', 'images', filename)

        if os.path.isfile(filepath):
            return send_file(filepath)
        else:
            return 'Error'
    return "File parameter is required", 400

@app.route('/api/v1/random_number')
def random_number_old():
    if 'username' not in session:
        return redirect(url_for('login'))

    from_param = request.args.get('from', default=1, type=int)
    to_param = request.args.get('to', default=1000000, type=int)
    random_num = random.randint(from_param, to_param)

    return render_template('number.html', random_num=random_num, from_param=from_param, to_param=to_param)

if __name__ == '__main__':
    init_db()
    app.run(debug=True, host='0.0.0.0', port=10000)